#! /bin/sh
# Copyright (c) 1995-2003 SuSE Linux AG, Nuernberg, Germany.
# All rights reserved.
#
# Author: Kurt Garloff
# Please send feedback to http://www.suse.de/feedback/
#
# /etc/init.d/sis1100
#   and its symbolic link
# /(usr/)sbin/rcsis1100
#
# Template system startup script for some example service/daemon sis1100
#
# LSB compatible service control script; see http://www.linuxbase.org/spec/
# 
# Note: This template uses functions rc_XXX defined in /etc/rc.status on
# UnitedLinux (UL) based Linux distributions. If you want to base your 
# script on this template and ensure that it works on non UL based LSB 
# compliant Linux distributions, you either have to provide the rc.status
# functions from UL or change the script to work without them.
#
### BEGIN INIT INFO
# Provides:          sis1100
# Required-Start:    $syslog $remote_fs
# X-UnitedLinux-Should-Start: $time ypbind sendmail
# Required-Stop:     $syslog $remote_fs
# X-UnitedLinux-Should-Stop: $time ypbind sendmail
# Default-Start:     3 5
# Default-Stop:      0 1 2 6
# Short-Description: sis1100 Interface to SIS1100 card
# Description:       Start sis1100 driver
### END INIT INFO
# 
# Any extensions to the keywords given above should be preceeded by 
# X-VendorTag- (X-UnitedLinux- for us) according to LSB.
# 
# Notes on Required-Start/X-UnitedLinux-Should-Start:
# * There are two different issues that are solved by Required-Start
#    and X-UnitedLinux-Should-Start
# (a) Hard dependencies: This is used by the runlevel editor to determine
#     which services absolutely need to be started to make the start of
#     this service make sense. Example: nfsserver should have
#     Required-Start: $portmap
#     Also, required services are started before the dependent ones.
#     The runlevel editor will warn about such missing hard dependencies
#     and suggest enabling. During system startup, you may expect an error,
#     if the dependency is not fulfilled.
# (b) Specifying the init script ordering, not real (hard) dependencies.
#     This is needed by insserv to determine which service should be
#     started first (and at a later stage what services can be started
#     in parallel). The tag X-UnitedLinux-Should-Start: is used for this.
#     It tells, that if a service is available, it should be started
#     before. If not, never mind.
# * When specifying hard dependencies or ordering requirements, you can 
#   use names of services (contents of their Provides: section)
#   or pseudo names starting with a $. The following ones are available
#   according to LSB (1.1):
#	$local_fs		all local file systems are mounted
#				(most services should need this!)
#	$remote_fs		all remote file systems are mounted
#				(note that /usr may be remote, so
#				 many services should Require this!)
#	$syslog			system logging facility up
#	$network		low level networking (eth card, ...)
#	$named			hostname resolution available
#	$netdaemons		all network daemons are running
#   The $netdaemons pseudo service has been removed in LSB 1.2.
#   For now, we still offer it for backward compatibility.
#   These are new (LSB 1.2):
#	$time			the system time has been set correctly	
#	$portmap		SunRPC portmapping service available
#   UnitedLinux extensions:
#	$ALL			indicates that a script should be inserted
#				at the end
# * The services specified in the stop tags 
#   (Required-Stop/X-UnitedLinux-Should-Stop)
#   specify which services need to be still running when this service
#   is shut down. Often the entries there are just copies or a subset 
#   from the respective start tag.
# * X-UnitedLinux-Should-Start/Stop are not part of LSB (as of 1.3)
#   but official Should-Start/Stop tags are in discussion (1.9).
#   insserv does support these as well.
# * X-UnitedLinux-Default-Enabled: yes/no is used at installation time
#   (%fillup_and_insserv macro in %post of many RPMs) to specify whether
#   a startup script should default to be enabled after installation.
#   It's not used by insserv.
#
# Note on runlevels:
# 0 - halt/poweroff 			6 - reboot
# 1 - single user			2 - multiuser without network exported
# 3 - multiuser w/ network (text mode)  5 - multiuser w/ network and X11 (xdm)
# 
# Note on script names:
# http://www.linuxbase.org/spec/refspecs/LSB_1.3.0/gLSB/gLSB/scrptnames.html
# A registry has been set up to manage the init script namespace.
# http://www.lanana.org/
# Please use the names already registered or register one or use a
# vendor prefix.



SIS1100_MODULE_NAME=sis1100
SIS1100_MODULE=$SIS1100_MODULE_NAME.ko
SIS1100_BASENAME=${SIS1100_MODULE_NAME}_
SIS1100_DEVDIR=/dev
SIS1100_MODE=666
SIS1100_OWNER=root
SIS1100_GROUP=root

# These definitions must match the definitions in sis1100_var.h
MINORBITS=8
MINORCARDBITS=2
MINORTYPEBITS=2
MINORUSERBITS=`expr $MINORBITS - $MINORCARDBITS - $MINORTYPEBITS`
# USERBITS overwrites MINORUSERBITS
USERBITS=1

types0="remote"
types1="ram"
types2="ctrl"
types3="dsp"

function mkname () {
    card=$1
    type=$2
    user=$3
    tname=`eval echo \\\$types$type`
    name=$SIS1100_DEVDIR/${SIS1100_BASENAME}`printf '%d%d' $card $user`$tname
    echo $name
}

function shiftv () {
    val=$1
    i=$2
    while [ $i -gt 0 ]; do
        val=`expr $val \* 2`
        i=`expr $i - 1`
    done
    echo $val
}

function create_devices {
    MAXCARDS=`shiftv 1 $MINORCARDBITS`
    CARDSHIFT=`expr $MINORUSERBITS + $MINORTYPEBITS`
    TYPESHIFT=$MINORUSERBITS
    MAXTYPES=`shiftv 1 $MINORTYPEBITS`
    MAXUSER=`shiftv 1 $USERBITS`
    
    MODULE_LIST=`grep -q $SIS1100_MODULE_NAME /proc/devices`

    if [ -z "${MODULE_LIST}" ] ; then
        # invoke insmod or modpobe with all arguments we got
	if [ -f $SIS1100_MODULE ]; then
	    insmod $SIS1100_MODULE $* || exit 1
	else
	    modprobe $SIS1100_MODULE_NAME $* || exit 1
	fi
    fi
    
    major=`cat /proc/devices | awk "\\$2==\"$SIS1100_MODULE_NAME\" {print \\$1}"`
    #echo major $device: $major
    
    rm -f $SIS1100_DEVDIR/${SIS1100_BASENAME}*
    
    card=`expr $MAXCARDS - 1`
    while [ $card -ge 0 ]; do
	type=`expr $MAXTYPES - 1`
        while [ $type -ge 0 ]; do
            user=`expr $MAXUSER - 1`
            while [ $user -ge 0 ]; do
                # echo "    " user $user
                cardbits=`shiftv $card $CARDSHIFT`
                typebits=`shiftv $type $TYPESHIFT`
                minorbits=`expr $cardbits + $typebits + $user`
                name=`mkname $card $type $user`
                # echo mknod $name c $major $minorbits
                mknod $name c $major $minorbits
                user=`expr $user - 1`
            done
            type=`expr $type - 1`
        done
	card=`expr $card - 1`
    done
    
    chown $SIS1100_OWNER $SIS1100_DEVDIR/${SIS1100_BASENAME}*
    chgrp $SIS1100_GROUP $SIS1100_DEVDIR/${SIS1100_BASENAME}*
    chmod $SIS1100_MODE  $SIS1100_DEVDIR/${SIS1100_BASENAME}*
}

function remove_devices {
    rm -f $SIS1100_DEVDIR/${SIS1100_BASENAME}*
}

function load_failed {
    echo -n "$1"
    rc_failed $2
    rc_status -v
    exit $2
}

function kernel_thread_prio {
    KT_PID=`ps aux | grep "\[sis1100_" | grep -v grep | awk '{ print $2 }'`
    chrt -p -f 20 ${KT_PID}
}

# Source LSB init functions
# providing start_daemon, killproc, pidofproc, 
# log_success_msg, log_failure_msg and log_warning_msg.
# This is currently not used by UnitedLinux based distributions and
# not needed for init scripts for UnitedLinux only. If it is used,
# the functions from rc.status should not be sourced or used.
#. /lib/lsb/init-functions

# Shell functions sourced from /etc/rc.status:
#      rc_check         check and set local and overall rc status
#      rc_status        check and set local and overall rc status
#      rc_status -v     be verbose in local rc status and clear it afterwards
#      rc_status -v -r  ditto and clear both the local and overall rc status
#      rc_status -s     display "skipped" and exit with status 3
#      rc_status -u     display "unused" and exit with status 3
#      rc_failed        set local and overall rc status to failed
#      rc_failed <num>  set local and overall rc status to <num>
#      rc_reset         clear both the local and overall rc status
#      rc_exit          exit appropriate to overall rc status
#      rc_active        checks whether a service is activated by symlinks
#      rc_splash arg    sets the boot splash screen to arg (if active)
. /etc/rc.status

# Reset status of this service
rc_reset

# Return values acc. to LSB for all commands but status:
# 0	  - success
# 1       - generic or unspecified error
# 2       - invalid or excess argument(s)
# 3       - unimplemented feature (e.g. "reload")
# 4       - user had insufficient privileges
# 5       - program is not installed
# 6       - program is not configured
# 7       - program is not running
# 8--199  - reserved (8--99 LSB, 100--149 distrib, 150--199 appl)
# 
# Note that starting an already running service, stopping
# or restarting a not-running service as well as the restart
# with force-reload (in case signaling is not supported) are
# considered a success.

case "$1" in
    start)
	echo -n "Starting SIS1100"
	create_devices
	kernel_thread_prio

	# Remember status and be verbose
	rc_status -v
	;;
    stop)
	echo -n "Shutting down SIS1100"
	## Stop daemon with killproc(8) and if this fails
	## killproc sets the return value according to LSB.

	remove_devices
	rmmod ${SIS1100_MODULE_NAME}

	# Remember status and be verbose
	rc_status -v
	;;
    try-restart|condrestart)
	## Do a restart only if the service was active before.
	## Note: try-restart is now part of LSB (as of 1.9).
	## RH has a similar command named condrestart.
	if test "$1" = "condrestart"; then
		echo "${attn} Use try-restart ${done}(LSB)${attn} rather than condrestart ${warn}(RH)${norm}"
	fi
	$0 status
	if test $? = 0; then
		$0 restart
	else
		rc_reset	# Not running is not a failure.
	fi
	# Remember status and be quiet
	rc_status
	;;
    restart)
	## Stop the service and regardless of whether it was
	## running or not, start it again.
	$0 stop
	$0 start

	# Remember status and be quiet
	rc_status
	;;
    force-reload)
	## Signal the daemon to reload its config. Most daemons
	## do this on signal 1 (SIGHUP).
	## If it does not support it, restart.

	echo -n "Reload service SIS1100"

	$0 try-restart
	rc_status
	;;
    reload)
	## Like force-reload, but if daemon does not support
	## signaling, do nothing (!)

	$0 try-restart
	rc_status
	;;
    status)
	echo -n "Checking for service SIS1100"
	## Check status with checkproc(8), if process is running
	## checkproc will return with exit status 0.

	# Return value is slightly different for the status command:
	# 0 - service up and running
	# 1 - service dead, but /var/run/  pid  file exists
	# 2 - service dead, but /var/lock/ lock file exists
	# 3 - service not running (unused)
	# 4 - service status unknown :-(
	# 5--199 reserved (5--99 LSB, 100--149 distro, 150--199 appl.)
	
	# NOTE: checkproc returns LSB compliant status values.
	checkmod ${SIS1100_MODULE_NAME}

	# NOTE: rc_status knows that we called this init script with
	# "status" option and adapts its messages accordingly.
	rc_status -v
	;;
    *)
	echo "Usage: $0 {start|stop|status|try-restart|restart|force-reload|reload|probe}"
	exit 1
	;;
esac
rc_exit
